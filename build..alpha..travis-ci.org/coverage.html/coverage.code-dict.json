{"/home/travis/build/npmtest/node-npmtest-shrinkwrap/test.js":"/* istanbul instrument in package npmtest_shrinkwrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shrinkwrap/lib.npmtest_shrinkwrap.js":"/* istanbul instrument in package npmtest_shrinkwrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_shrinkwrap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_shrinkwrap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-shrinkwrap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-shrinkwrap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_shrinkwrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_shrinkwrap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_shrinkwrap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_shrinkwrap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_shrinkwrap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_shrinkwrap.__dirname + '/lib.npmtest_shrinkwrap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shrinkwrap/node_modules/shrinkwrap/index.js":"'use strict';\n\nvar semver = require('npm-registry/semver')\n  , debug = require('debug')('shrinkwrap')\n  , Registry = require('npm-registry')\n  , Module = require('./module')\n  , fuse = require('fusing');\n\n//\n// Variable cache.\n//\nvar toString = Object.prototype.toString;\n\n/**\n * Ensure that items in the array are unique.\n *\n * @param {Mixed} value A value in the array.\n * @param {Number} index The index of the item in the array.\n * @param {Array} arr Reference to the array we're filtering.\n * @returns {Boolean}\n */\nfunction unique(value, index, arr) {\n  return arr.indexOf(value) === index;\n}\n\n/**\n * Generate a new Shrinkwrap from a given package or module.\n *\n * Options:\n *\n * - registry: URL of the npm registry we should use to read package information.\n * - production: Should we only include production packages.\n * - limit: Amount of parallel processing tasks we could use to retrieve data.\n * - optimize: Should we attempt to optimize the data structure in the same way\n *   that npm would have done it.\n * - mirrors: A list of npm mirrors to be used with our registry.\n * - githulk: Optional preconfigured GitHulk.\n *\n * @constructor\n * @param {Object} options Options.\n * @api public\n */\nfunction Shrinkwrap(options) {\n  this.fuse();\n\n  options = options || {};\n\n  options.registry = 'registry' in options\n    ? options.registry\n    : 'http://registry.nodejitsu.com/';\n\n  options.production = 'production' in options\n    ? options.production\n    : process.NODE_ENV === 'production';\n\n  options.optimize = 'optimize' in options\n    ? options.optimize\n    : true;\n\n  options.limit = 'limit' in options\n    ? options.limit\n    : 10;\n\n  options.mirrors = 'mirrors' in options\n    ? options.mirrors\n    : false;\n\n  this.registry = 'string' !== typeof options.registry\n    ? options.registry\n    : new Registry({\n    registry: options.registry || Registry.mirrors.nodejitsu,\n    githulk: options.githulk,\n    mirrors: options.mirrors\n  });\n\n  this.production = options.production;     // Don't include devDependencies.\n  this.limit = options.limit;               // Maximum concurrency.\n  this.cache = Object.create(null);         // Dependency cache.\n}\n\nfuse(Shrinkwrap, require('eventemitter3'));\n\n/**\n * No previous package, resolve one for us instead.\n *\n * @param {String} name Package name.\n * @param {String} range Version range.\n * @param {Function} fn The completion callback.\n * @api public\n */\nShrinkwrap.prototype.get = function get(name, range, fn) {\n  if ('function' === typeof range) {\n    fn = range;\n    range = 'latest';\n  }\n\n  var shrinkwrap = this;\n\n  this.registry.packages.release(name, range, function release(err, pkg) {\n    if (err) return fn(err);\n\n    debug('successfully resolved %s@%s', name, range);\n    shrinkwrap.resolve(pkg, fn);\n  });\n};\n\n/**\n * Get accurate type information for the given JavaScript class.\n *\n * @param {Mixed} of The thing who's type class we want to figure out.\n * @returns {String} lowercase variant of the name.\n * @api private\n */\nShrinkwrap.prototype.type = function type(of) {\n  return toString.call(of).slice(8, -1).toLowerCase();\n};\n\n/**\n * Resolve all dependencies and their versions for the given root package.\n *\n * @param {Object} pkg  Package data from npm.\n * @param {Function} fn Callback\n * @api public\n */\nShrinkwrap.prototype.resolve = function resolve(source, fn) {\n  source = Array.isArray(source) ? source[0] : source;\n\n  var shrinkwrap = this;\n\n  /**\n   * Scan the given package.json like structure for possible dependency\n   * locations which will be automatically queued for fetching and processing.\n   *\n   * @param {Object} packages The packages.json body.\n   * @param {Object} ref The location of the new packages in the tree.\n   * @param {Number} depth How deep was this package nested\n   * @api private\n   */\n  function queue(packages, ref, depth) {\n    packages = shrinkwrap.dedupe(packages);\n\n    Shrinkwrap.dependencies.forEach(function each(key) {\n      if (this.production && 'devDependencies' === key) return;\n      if ('object' !== this.type(packages[key])) return;\n\n      Object.keys(packages[key]).forEach(function each(name) {\n        var range = packages[key][name]\n          , _id = name +'@'+ range;\n\n        ref.dependencies = ref.dependencies || {};\n        queue.push({\n          name: name,       // Name of the module\n          range: range,     // Semver range\n          _id: _id,         // Semi unique id.\n          parents: [ref],   // Reference to the parent module.\n          depth: depth      // The depth of the reference.\n        });\n      });\n    }, shrinkwrap);\n\n    return queue;\n  }\n\n  //\n  // Our internal data structures that make it possible to search for packages.\n  //\n  queue.dependencytree = Object.create(null);\n  queue.todolist = [];\n  queue.errors = [];\n\n  //\n  // The original root that get's resolved.\n  //\n  queue.data = Object.create(null);\n  queue.data.name = source.name;\n  queue.data.version = source.version;\n\n  /**\n   * Check if we've already processed the specification before processing.\n   *\n   * @param {Object} data Processing specification for the worker.\n   * @api private\n   */\n  queue.push = function push(data) {\n    //\n    // Optimization: prevent queueing the same module lookup.\n    //\n    if (queue.todolist.some(function some(todo) {\n      if (todo._id !== data._id) return false;\n\n      todo.parents = todo.parents.concat(data.parents).filter(unique);\n\n      return true;\n    })) return;\n\n    //\n    // Optimization: It has already been processed and listed before.\n    //\n    if (data._id in queue.dependencytree) {\n      queue.dependencytree[data._id].dependent = (\n        queue.dependencytree[data._id].dependent\n      ).concat(data.parents).filter(unique);\n\n      return shrinkwrap.optimize(queue.dependencytree[data._id]);\n    }\n\n    queue.todolist.push(data);\n  };\n\n  /**\n   * Take an item from the todo list and process it's specification.\n   *\n   * @api private\n   */\n  queue.worker = function worker(err) {\n    if (err) queue.errors.push(err);\n\n    var spec = queue.todolist.shift();\n\n    //\n    // We've successfully processed all requests.\n    //\n    if (!spec) {\n      fn(undefined, queue.dependencytree, queue.errors);\n\n      shrinkwrap.destroy();\n      return [\n        'data',\n        'errors',\n        'dependencytree'\n      ].forEach(function cleanup(remove) {\n        delete queue[remove];\n      });\n    }\n\n    debug('processing %s. %s left to process', spec.name, queue.todolist.length);\n\n    shrinkwrap.release(spec.name, spec.range, function release(err, data, cached) {\n      if (err || !data) {\n        if (err) debug('failed to resolve %s due to error: ', spec.name, err);\n        return worker(err);\n      }\n\n      var clone = queue.dependencytree[spec._id] = data.module.clone({\n        parents: spec.parents,\n        depth: spec.depth\n      });\n\n      spec.parents.forEach(function each(parent) {\n        parent.dependencies[spec.name] = queue.dependencytree[spec._id];\n      });\n\n      if (!cached) queue(data, queue.dependencytree[spec._id], spec.depth + 1);\n      worker();\n    });\n  };\n\n  queue(source, queue.data, 0).worker();\n};\n\n/**\n * Get all releases for a given module name.\n *\n * @param {String} name The name of the module we should get\n * @param {Function} fn Callback\n * @api private\n */\nShrinkwrap.prototype.releases = function releases(name, fn) {\n  if (this.cache && name in this.cache) {\n    debug('CACHEHIT: Retrieving `%s` from cache', name);\n    return fn(undefined, this.cache[name]);\n  }\n\n  var shrinkwrap = this;\n\n  this.registry.packages.releases(name, function details(err, versions) {\n    if (err) return fn(err);\n\n    var keys = Object.keys(versions)\n      , latest = keys.filter(function valid(ver) {\n          return !!semver.valid(ver);\n        }).sort(semver.rcompare)[0]\n      , result = { latest: latest };\n\n    //\n    // Map the data to something smaller as we don't need all the package info.\n    //\n    result.releases = keys.reduce(function reduce(memo, key) {\n      var data = versions[key];\n\n      memo[key] = {\n        released: data.time[key],\n        licenses: data.licenses,\n        _npmUser: data._npmUser,\n        version: data.version,\n        name: data.name,\n        latest: latest,\n      };\n\n      Shrinkwrap.dependencies.forEach(function (dep) {\n        memo[key][dep] = data[dep];\n      });\n\n      return memo;\n    }, Object.create(null));\n\n    result.versions = keys;\n\n    if (shrinkwrap.cache) shrinkwrap.cache[name] = result;\n    fn(err, result);\n  });\n};\n\n/**\n * Get a single release.\n *\n * @param {String} name The name of the module.\n * @param {String} range The version range.\n * @param {Function} fn The callback.\n * @api private\n */\nShrinkwrap.prototype.release = function release(name, range, fn) {\n  var key = name +'@'+ range\n    , shrinkwrap = this;\n\n  if (this.cache && key in this.cache) {\n    debug('CACHEHIT: Retrieving `%s` from cache', key);\n    return fn(undefined, this.cache[key], true);\n  }\n\n  this.releases(name, function releases(err, result) {\n    if (err) return fn(err);\n\n    var version = semver.maxSatisfying(result.versions, range)\n      , data = result.releases[version];\n\n    //\n    // No matching version for the given module. It could be that the user has\n    // set the range to git dependency instead.\n    //\n    if (!data) {\n      debug('Couldnt find the matching version %s in the returned releases for %s', range, name);\n      debug('Only found: %s', result.versions.join(', '));\n      return fn();\n    }\n\n    //\n    // Transform to a Module instance.\n    //\n    var cache = { module: new Module(data, range) };\n    Shrinkwrap.dependencies.forEach(function (dep) {\n      cache[dep] = data[dep];\n    });\n\n    if (shrinkwrap.cache) shrinkwrap.cache[key] = cache;\n\n    fn(err, cache, false);\n  });\n};\n\n/**\n * Optimize the dependency tree so we're not installing duplicate dependencies\n * in every module when they can be properly resolved by placing it upwards in\n * our dependency tree.\n *\n * @param {Object} dependency The dependency that has multiple dependents.\n * @api private\n */\nShrinkwrap.prototype.optimize = function optimize(dependency) {\n  var dependent = dependency.dependent\n    , version = dependency.version\n    , name = dependency.name\n    , common;\n\n  /**\n   * Find suitable parent nodes which can hold this module without creating\n   * a possible conflict because there two different versions of the module in\n   * the dependency tree.\n   *\n   * @param {Object} dependent A dependent of a module.\n   * @returns {Array} parents.\n   * @api private\n   */\n  function parent(dependent) {\n    var node = dependent\n      , result = [];\n\n    while (node.parent) {\n      if (!available(node.parent)) break;\n\n      result.push(node.parent);\n      node = node.parent;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the dependency tree does not already contain a different version\n   * of this module.\n   *\n   * @param {Object} dependencies The dependencies of a module.\n   * @returns {Boolean} Available as module location.\n   * @api private\n   */\n  function available(dependencies) {\n    if (!dependencies) return false;\n\n    return Object.keys(dependencies).every(function every(key) {\n      var dependency = dependencies[key];\n\n      if (!dependency) return false;\n\n      if (dependency.name !== name) return true;\n      if (dependency.version === version) return true;\n\n      return false;\n    });\n  }\n\n  var parents = dependent.map(function (dep) {\n    var parents = parent(dep);\n\n    //\n    // No parents, this means we cannot move this module to a new location as it\n    // will most likely conflict with other version. The only solution is to\n    // keep it as duplicate as it's own dependencies. The way to do this is to\n    // remove out of\n    //\n    if (!parents.length) {\n      dependency.dependent.splice(dependency.dependent.indexOf(dep), 1);\n    }\n\n    return parents;\n  }).filter(function filter(results) {\n    return !!results.length;\n  });\n\n  //\n  // Detect if all parents have a common root element where we can optimize the\n  // module to.\n  //\n};\n\n/**\n * It could be that a package has dependency added as devDependency as well as\n * a regular dependency. We want to make sure that we don't filter out this\n * dependency when we're resolving packages so we're going to remove it from the\n * devDependencies if they are exactly the same.\n *\n * @param {Object} pkg The package.\n * @returns {Object} The package.\n * @api private\n */\nShrinkwrap.prototype.dedupe = function dedupe(pkg) {\n  if (!pkg) return pkg;\n  if (!pkg.dependencies) return pkg;\n  if (!pkg.devDependencies || this.production) return pkg;\n\n  Object.keys(pkg.dependencies).forEach(function searchanddestroy(name) {\n    if (!(name in pkg.devDependencies)) return;\n    try {\n      if (!semver.eq(pkg.devDependencies[name], pkg.dependencies[name])) return;\n    } catch (e) { return; }\n\n    //\n    // Only remove when we have an exact match on the version number.\n    //\n    delete pkg.devDependencies[name];\n  });\n\n  return pkg;\n};\n\n/**\n * Clean up any cache of data structures that we might have had laying around.\n * Making this instance ready for garbage collection.\n *\n * @public\n */\nShrinkwrap.prototype.destroy = function destroy() {\n  this.registry = this.cache = null;\n};\n\n/**\n * The various of locations where dependencies for a given module can be\n * defined.\n *\n * @type {Array}\n * @private\n */\nShrinkwrap.dependencies = [\n  'dependencies',\n  'devDependencies',\n  'peerDependencies',\n  'optionalDependencies'\n];\n\n//\n// Expose the module interface.\n//\nmodule.exports = Shrinkwrap;\n","/home/travis/build/npmtest/node-npmtest-shrinkwrap/node_modules/shrinkwrap/module.js":"'use strict';\n\nvar semver = require('npm-registry/semver');\n\n/**\n * The representation of a single module.\n *\n * @constructor\n * @param {Object} data The module data.\n * @param {String} range The semver range used to get this version.\n * @param {Number} depth How deeply nested was this module.\n * @api private\n */\nfunction Module(data, range, depth) {\n  this._id = data.name +'@'+ range;     // An unique id that identifies this module.\n  this.released = data.released;        // The date this version go released.\n  this.licenses = data.licenses;        // The licensing.\n  this.version = data.version;          // The version of the module.\n  this.author = data._npmUser || {};    // Author of the release.\n  this.latest = data.latest;            // What the latest version is of the module.\n  this.required = range;                // Which range we required to find this module.\n  this.name = data.name;                // The name of the module.\n  this.parents = [];                    // Modules that depend on this version.\n  this.dependent = [];                  // Modules that depend on this version.\n  this.depth = depth;                   // The depth of the dependency nesting.\n}\n\n//\n// Is this dependency up to date.\n//\nObject.defineProperty(Module.prototype, 'uptodate', {\n  enumerable: false,\n  get: function get() {\n    return this.version === this.latest;\n  }\n});\n\n//\n// Check if the give range is pinned.\n//\nObject.defineProperty(Module.prototype, 'pinned', {\n  enumerable: false,\n  get: function get() {\n    if (this.range === '*' || this.range === 'latest') return false;\n\n    var range = semver.validRange(this.range, true);\n\n    if (range && range.indexOf('>=') === 0) return false;\n    return true;\n  }\n});\n\n/**\n * Create a clone of the module.\n *\n * @param {Object} data Data that should be merged with the clone.\n * @returns {Module} New Module instance\n * @api public\n */\nModule.prototype.clone = function clone(data) {\n  var module = new Module({\n    _npmUser: JSON.parse(JSON.stringify(this.author || {})),\n    released: this.released,\n    licenses: this.licenses,\n    version: this.version,\n    latest: this.latest,\n    name: this.name\n  }, this.required, this.depth);\n\n  if (data) Object.keys(data).forEach(function each(prop) {\n    module[prop] = data[prop];\n  });\n\n  return module;\n};\n\n/**\n * Transform the instance to a valid object which will be returned for\n * a JSON.stringify.\n *\n * @returns {Object}\n * @api public\n */\nModule.prototype.toJSON = function toJSON() {\n  return {\n    uptodate: this.uptodate,\n    required: this.required,\n    released: this.released,\n    licenses: this.licenses,\n    version: this.version,\n    pinned: this.pinned,\n    author: this.author,\n    latest: this.latest,\n    depth: this.depth,\n    name: this.name,\n    _id: this._id,\n\n    parents: (this.parents || this.dependent || []).map(function map(parent) {\n      return parent.name +'@'+ parent.version;\n    })\n  };\n};\n\n//\n// Expose the Module.\n//\nmodule.exports = Module;\n","/home/travis/build/npmtest/node-npmtest-shrinkwrap/node_modules/shrinkwrap/version.js":"'use strict';\n\nvar semver = require('npm-registry/semver');\n\n/**\n * A simple representation of a module's version number.\n *\n * @constructor\n * @param {String} number The version number.\n * @api public\n */\nfunction Version(number) {\n  this.number = number;\n}\n\n/**\n * Check if the version number is greater then the given `version`.\n *\n * @param {String} version Version number.\n * @returns {Boolean}\n * @api public\n */\nVersion.prototype.gt = function gt(version) {\n  return semver.gt(this.number, version);\n};\n\n/**\n * Check if the version number is less then the given `version`.\n *\n * @param {String} version Version number.\n * @returns {Boolean}\n * @api public\n */\nVersion.prototype.lt = function lt(number) {\n  return semver.lt(this.number, number);\n};\n\n/**\n * String representation of the current version number.\n *\n * @api private\n */\nVersion.prototype.toString = function toString() {\n  return this.number;\n};\n\n//\n// Expose the module.\n//\nmodule.exports = Version;\n"}